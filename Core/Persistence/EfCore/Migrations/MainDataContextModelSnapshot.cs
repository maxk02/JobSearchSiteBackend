// <auto-generated />
using System;
using Core.Persistence.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Core.Persistence.EfCore.Migrations
{
    [DbContext(typeof(MainDataContext))]
    partial class MainDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CompanyUserProfile", b =>
                {
                    b.Property<long>("BookmarkedCompaniesId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersWhoBookmarkedId")
                        .HasColumnType("bigint");

                    b.HasKey("BookmarkedCompaniesId", "UsersWhoBookmarkedId");

                    b.HasIndex("UsersWhoBookmarkedId");

                    b.ToTable("CompanyBookmarks", (string)null);
                });

            modelBuilder.Entity("Core.Domains.Accounts.UserSession", b =>
                {
                    b.Property<string>("TokenId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ExpiresUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FirstTimeIssuedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastClient")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastDevice")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastOs")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("TokenId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSessions");
                });

            modelBuilder.Entity("Core.Domains.Categories.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("NameEng")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NameEng")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Core.Domains.Companies.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<string>("LogoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Core.Domains.CompanyClaims.CompanyClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyClaims");
                });

            modelBuilder.Entity("Core.Domains.CompanyClaims.UserCompanyClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClaimId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("UserCompanyClaims");
                });

            modelBuilder.Entity("Core.Domains.Countries.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Core.Domains.EmploymentTypes.EmploymentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("NameEng")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("NameEng")
                        .IsUnique();

                    b.ToTable("EmploymentType");
                });

            modelBuilder.Entity("Core.Domains.JobApplications.JobApplication", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateTimeCreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("JobApplications");
                });

            modelBuilder.Entity("Core.Domains.JobApplications.JobApplicationTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("JobApplicationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("JobApplicationId", "Tag")
                        .IsUnique();

                    b.ToTable("JobApplicationTag");
                });

            modelBuilder.Entity("Core.Domains.JobContractTypes.JobContractType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId", "Name")
                        .IsUnique();

                    b.ToTable("ContractTypes");
                });

            modelBuilder.Entity("Core.Domains.JobFolderClaims.JobFolderClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobFolderClaims");
                });

            modelBuilder.Entity("Core.Domains.JobFolderClaims.UserJobFolderClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClaimId")
                        .HasColumnType("bigint");

                    b.Property<long>("FolderId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("FolderId");

                    b.HasIndex("UserId");

                    b.ToTable("UserJobFolderClaims");
                });

            modelBuilder.Entity("Core.Domains.JobFolders.JobFolder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("JobFolders");
                });

            modelBuilder.Entity("Core.Domains.JobFolders.JobFolderRelation", b =>
                {
                    b.Property<long>("AncestorId")
                        .HasColumnType("bigint");

                    b.Property<long>("DescendantId")
                        .HasColumnType("bigint");

                    b.Property<int>("Depth")
                        .HasColumnType("int");

                    b.HasKey("AncestorId", "DescendantId");

                    b.HasIndex("DescendantId");

                    b.ToTable("JobFolderRelations");
                });

            modelBuilder.Entity("Core.Domains.Jobs.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTimeExpiringUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTimePublishedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<long>("JobFolderId")
                        .HasColumnType("bigint");

                    b.PrimitiveCollection<string>("NiceToHaves")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Requirements")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Responsibilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("JobFolderId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Core.Domains.Jobs.JobSalaryInfo", b =>
                {
                    b.Property<long>("JobId")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsAfterTaxes")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Maximum")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal?>("Minimum")
                        .HasColumnType("decimal(12,2)");

                    b.Property<int>("UnitOfTime")
                        .HasColumnType("int");

                    b.HasKey("JobId");

                    b.ToTable("JobSalaryInfo");
                });

            modelBuilder.Entity("Core.Domains.Locations.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("Subdivisions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Core.Domains.PersonalFiles.PersonalFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("GuidIdentifier")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PersonalFiles");
                });

            modelBuilder.Entity("Core.Domains.UserProfiles.UserProfile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Core.Persistence.EfCore.EntityConfigs.AspNetCoreIdentity.MyIdentityRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Core.Persistence.EfCore.EntityConfigs.AspNetCoreIdentity.MyIdentityUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("EmploymentTypeJob", b =>
                {
                    b.Property<long>("EmploymentTypesId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobsId")
                        .HasColumnType("bigint");

                    b.HasKey("EmploymentTypesId", "JobsId");

                    b.HasIndex("JobsId");

                    b.ToTable("EmploymentTypeJob");
                });

            modelBuilder.Entity("JobApplicationPersonalFile", b =>
                {
                    b.Property<long>("JobApplicationsId")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonalFilesId")
                        .HasColumnType("bigint");

                    b.HasKey("JobApplicationsId", "PersonalFilesId");

                    b.HasIndex("PersonalFilesId");

                    b.ToTable("JobApplicationPersonalFile");
                });

            modelBuilder.Entity("JobApplicationUserProfile", b =>
                {
                    b.Property<long>("BookmarkedJobApplicationsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("BookmarkedJobApplicationsId", "UserProfileId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("JobApplicationBookmarks", (string)null);
                });

            modelBuilder.Entity("JobFolderUserProfile", b =>
                {
                    b.Property<long>("LastManagedJobFoldersId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("LastManagedJobFoldersId", "UserProfileId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("LastManagedJobFolders", (string)null);
                });

            modelBuilder.Entity("JobJobContractType", b =>
                {
                    b.Property<long>("JobContractTypesId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobsId")
                        .HasColumnType("bigint");

                    b.HasKey("JobContractTypesId", "JobsId");

                    b.HasIndex("JobsId");

                    b.ToTable("JobJobContractType");
                });

            modelBuilder.Entity("JobLocation", b =>
                {
                    b.Property<long>("JobsId")
                        .HasColumnType("bigint");

                    b.Property<long>("LocationsId")
                        .HasColumnType("bigint");

                    b.HasKey("JobsId", "LocationsId");

                    b.HasIndex("LocationsId");

                    b.ToTable("JobLocation");
                });

            modelBuilder.Entity("JobUserProfile", b =>
                {
                    b.Property<long>("BookmarkedJobsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersWhoBookmarkedId")
                        .HasColumnType("bigint");

                    b.HasKey("BookmarkedJobsId", "UsersWhoBookmarkedId");

                    b.HasIndex("UsersWhoBookmarkedId");

                    b.ToTable("JobBookmarks", (string)null);
                });

            modelBuilder.Entity("JobUserProfile1", b =>
                {
                    b.Property<long>("LastManagedJobsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserProfileId")
                        .HasColumnType("bigint");

                    b.HasKey("LastManagedJobsId", "UserProfileId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("LastManagedJobs", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CompanyUserProfile", b =>
                {
                    b.HasOne("Core.Domains.Companies.Company", null)
                        .WithMany()
                        .HasForeignKey("BookmarkedCompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domains.UserProfiles.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UsersWhoBookmarkedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domains.Accounts.UserSession", b =>
                {
                    b.HasOne("Core.Domains.UserProfiles.UserProfile", "UserProfile")
                        .WithMany("UserSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("Core.Domains.Companies.Company", b =>
                {
                    b.HasOne("Core.Domains.Countries.Country", "Country")
                        .WithMany("Companies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.Domains.CompanyClaims.UserCompanyClaim", b =>
                {
                    b.HasOne("Core.Domains.CompanyClaims.CompanyClaim", "CompanyClaim")
                        .WithMany("UserCompanyClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domains.Companies.Company", "Company")
                        .WithMany("UserCompanyClaims")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domains.UserProfiles.UserProfile", "User")
                        .WithMany("UserCompanyClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domains.JobApplications.JobApplication", b =>
                {
                    b.HasOne("Core.Domains.Jobs.Job", "Job")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domains.UserProfiles.UserProfile", "User")
                        .WithMany("JobApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domains.JobApplications.JobApplicationTag", b =>
                {
                    b.HasOne("Core.Domains.JobApplications.JobApplication", "JobApplication")
                        .WithMany("Tags")
                        .HasForeignKey("JobApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobApplication");
                });

            modelBuilder.Entity("Core.Domains.JobContractTypes.JobContractType", b =>
                {
                    b.HasOne("Core.Domains.Countries.Country", "Country")
                        .WithMany("JobContractTypes")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.Domains.JobFolderClaims.UserJobFolderClaim", b =>
                {
                    b.HasOne("Core.Domains.JobFolderClaims.JobFolderClaim", "JobFolderClaim")
                        .WithMany("UserJobFolderClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domains.JobFolders.JobFolder", "JobFolder")
                        .WithMany("UserJobFolderClaims")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domains.UserProfiles.UserProfile", "User")
                        .WithMany("UserJobFolderClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobFolder");

                    b.Navigation("JobFolderClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domains.JobFolders.JobFolder", b =>
                {
                    b.HasOne("Core.Domains.Companies.Company", "Company")
                        .WithMany("JobFolders")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("Core.Domains.JobFolders.JobFolderRelation", b =>
                {
                    b.HasOne("Core.Domains.JobFolders.JobFolder", "Ancestor")
                        .WithMany("RelationsWhereThisIsAncestor")
                        .HasForeignKey("AncestorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domains.JobFolders.JobFolder", "Descendant")
                        .WithMany("RelationsWhereThisIsDescendant")
                        .HasForeignKey("DescendantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ancestor");

                    b.Navigation("Descendant");
                });

            modelBuilder.Entity("Core.Domains.Jobs.Job", b =>
                {
                    b.HasOne("Core.Domains.Categories.Category", "Category")
                        .WithMany("Jobs")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Core.Domains.Companies.Company", null)
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Core.Domains.JobFolders.JobFolder", "JobFolder")
                        .WithMany("Jobs")
                        .HasForeignKey("JobFolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("JobFolder");
                });

            modelBuilder.Entity("Core.Domains.Jobs.JobSalaryInfo", b =>
                {
                    b.HasOne("Core.Domains.Jobs.Job", null)
                        .WithOne("SalaryInfo")
                        .HasForeignKey("Core.Domains.Jobs.JobSalaryInfo", "JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domains.Locations.Location", b =>
                {
                    b.HasOne("Core.Domains.Countries.Country", "Country")
                        .WithMany("Locations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Core.Domains.PersonalFiles.PersonalFile", b =>
                {
                    b.HasOne("Core.Domains.UserProfiles.UserProfile", "User")
                        .WithMany("PersonalFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Domains.UserProfiles.UserProfile", b =>
                {
                    b.HasOne("Core.Persistence.EfCore.EntityConfigs.AspNetCoreIdentity.MyIdentityUser", null)
                        .WithOne()
                        .HasForeignKey("Core.Domains.UserProfiles.UserProfile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domains.Locations.Location", null)
                        .WithMany("Users")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("EmploymentTypeJob", b =>
                {
                    b.HasOne("Core.Domains.EmploymentTypes.EmploymentType", null)
                        .WithMany()
                        .HasForeignKey("EmploymentTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domains.Jobs.Job", null)
                        .WithMany()
                        .HasForeignKey("JobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobApplicationPersonalFile", b =>
                {
                    b.HasOne("Core.Domains.JobApplications.JobApplication", null)
                        .WithMany()
                        .HasForeignKey("JobApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domains.PersonalFiles.PersonalFile", null)
                        .WithMany()
                        .HasForeignKey("PersonalFilesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobApplicationUserProfile", b =>
                {
                    b.HasOne("Core.Domains.JobApplications.JobApplication", null)
                        .WithMany()
                        .HasForeignKey("BookmarkedJobApplicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domains.UserProfiles.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobFolderUserProfile", b =>
                {
                    b.HasOne("Core.Domains.JobFolders.JobFolder", null)
                        .WithMany()
                        .HasForeignKey("LastManagedJobFoldersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domains.UserProfiles.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobJobContractType", b =>
                {
                    b.HasOne("Core.Domains.JobContractTypes.JobContractType", null)
                        .WithMany()
                        .HasForeignKey("JobContractTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domains.Jobs.Job", null)
                        .WithMany()
                        .HasForeignKey("JobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobLocation", b =>
                {
                    b.HasOne("Core.Domains.Jobs.Job", null)
                        .WithMany()
                        .HasForeignKey("JobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domains.Locations.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobUserProfile", b =>
                {
                    b.HasOne("Core.Domains.Jobs.Job", null)
                        .WithMany()
                        .HasForeignKey("BookmarkedJobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domains.UserProfiles.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UsersWhoBookmarkedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("JobUserProfile1", b =>
                {
                    b.HasOne("Core.Domains.Jobs.Job", null)
                        .WithMany()
                        .HasForeignKey("LastManagedJobsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Domains.UserProfiles.UserProfile", null)
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Core.Persistence.EfCore.EntityConfigs.AspNetCoreIdentity.MyIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Core.Persistence.EfCore.EntityConfigs.AspNetCoreIdentity.MyIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Core.Persistence.EfCore.EntityConfigs.AspNetCoreIdentity.MyIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Core.Persistence.EfCore.EntityConfigs.AspNetCoreIdentity.MyIdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Persistence.EfCore.EntityConfigs.AspNetCoreIdentity.MyIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Core.Persistence.EfCore.EntityConfigs.AspNetCoreIdentity.MyIdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Domains.Categories.Category", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("Core.Domains.Companies.Company", b =>
                {
                    b.Navigation("JobFolders");

                    b.Navigation("Jobs");

                    b.Navigation("UserCompanyClaims");
                });

            modelBuilder.Entity("Core.Domains.CompanyClaims.CompanyClaim", b =>
                {
                    b.Navigation("UserCompanyClaims");
                });

            modelBuilder.Entity("Core.Domains.Countries.Country", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("JobContractTypes");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("Core.Domains.JobApplications.JobApplication", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Core.Domains.JobFolderClaims.JobFolderClaim", b =>
                {
                    b.Navigation("UserJobFolderClaims");
                });

            modelBuilder.Entity("Core.Domains.JobFolders.JobFolder", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("RelationsWhereThisIsAncestor");

                    b.Navigation("RelationsWhereThisIsDescendant");

                    b.Navigation("UserJobFolderClaims");
                });

            modelBuilder.Entity("Core.Domains.Jobs.Job", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("SalaryInfo");
                });

            modelBuilder.Entity("Core.Domains.Locations.Location", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Core.Domains.UserProfiles.UserProfile", b =>
                {
                    b.Navigation("JobApplications");

                    b.Navigation("PersonalFiles");

                    b.Navigation("UserCompanyClaims");

                    b.Navigation("UserJobFolderClaims");

                    b.Navigation("UserSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
